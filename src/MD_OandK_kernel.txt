/*
 * GANSU: GPU Acclerated Numerical Simulation Utility
 *
 * Copyright (c) 2025, Hiroshima University and Fujitsu Limited
 * All rights reserved.
 *
 * This software is licensed under the BSD 3-Clause License.
 * You may obtain a copy of the license in the LICENSE file
 * located in the root directory of this source tree or at:
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */


 
// MD method(overlap and kinetic integral)
// (s|s) kernel
__global__
void overlap_kinetic_MDss(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1 /* s0 == s1 */, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    const size_t2 ab = index1to2(id, true); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];

    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 0, 0, 0) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k = 0;

    k = b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 3.0*b.exponent*p + 3.0*(p*p))/(p*p);

    AddToResult(coefandNorm1, g_overlap, i, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);
}


// (s|p) kernel
__global__ 
void overlap_kinetic_MDsp(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, false, shell_s1.count); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 1, 0, 0) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

    s = (a.coordinate.x-b.coordinate.x)*a.exponent/p;
    k = (a.coordinate.x-b.coordinate.x)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 5.0*b.exponent*p + 5.0*(p*p))/(p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*a.exponent/p;
    k = (a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 5.0*b.exponent*p + 5.0*(p*p))/(p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

    s = (a.coordinate.z-b.coordinate.z)*a.exponent/p;
    k = (a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 5.0*b.exponent*p + 5.0*(p*p))/(p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);
}



// (p|p) kernel
__global__ 
void overlap_kinetic_MDpp(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1 /* s0 == s1 */, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, true); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 0, 0, 1, 0, 0) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k = 0;
    double s = 0;

    s = (-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.5*p)/(p*p);
    k = b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 5.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 5.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 2.5*b.exponent*(p*p) + 2.5*(p*p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent/(p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 5.0*b.exponent*p - 5.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent/(p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 5.0*b.exponent*p - 5.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent/(p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 5.0*b.exponent*p - 5.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j, num_basis, is_symmetric);

    s = (-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.5*p)/(p*p);
    k = b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 5.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 5.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 2.5*b.exponent*(p*p) + 2.5*(p*p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j+1, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent/(p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 5.0*b.exponent*p - 5.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j+2, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent/(p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 5.0*b.exponent*p - 5.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent/(p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 5.0*b.exponent*p - 5.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j+1, num_basis, is_symmetric);

    s = (-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.5*p)/(p*p);
    k = b.exponent*(b.exponent*(-2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 3.0*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) + b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - 2.0*(p*p)))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j+2, num_basis, is_symmetric);
}


// (s|d) kernel
__global__ 
void overlap_kinetic_MDsd(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, false, shell_s1.count); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 2, 0, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 1, 1, 0) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p);
    k = (-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

    s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p);
    k = (-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

    s = (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p);
    k = (-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)/(p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 7.0*b.exponent*p + 7.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)/(p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 7.0*b.exponent*p + 7.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)/(p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 7.0*b.exponent*p + 7.0*(p*p))/(p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);
}


// (p|d) kernel
__global__ 
void overlap_kinetic_MDpd(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, false, shell_s1.count); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 0, 0, 2, 0, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 0, 0, 1, 1, 0) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

    s = (a.coordinate.x-b.coordinate.x)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 8.0*a.exponent*b.exponent*(p*p) + 7.0*a.exponent*(p*p*p) + 2.5*(b.exponent*b.exponent)*(p*p) - 3.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 3.5*b.exponent*(p*p) + 3.5*(p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

    s = -(a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p);
    k = (a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 3.5*b.exponent*(p*p) + 3.5*(p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 7.0*b.exponent*p - 7.0*(p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 8.0*a.exponent*b.exponent*(p*p) + 7.0*a.exponent*(p*p*p) + 2.5*(b.exponent*b.exponent)*(p*p) - 3.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j+1, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j+2, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 3.5*b.exponent*(p*p) + 3.5*(p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+1, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+1, j+3, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 7.0*b.exponent*p - 7.0*(p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+1, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+1, j+4, num_basis, is_symmetric);

    s = -(a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p);
    k = (a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 3.5*b.exponent*(p*p) + 3.5*(p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+1, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+1, j+5, num_basis, is_symmetric);

    s = -(a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
    k = (a.coordinate.z-b.coordinate.z)*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j, num_basis, is_symmetric);

    s = -(a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
    k = (a.coordinate.z-b.coordinate.z)*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) + (p*p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j+1, num_basis, is_symmetric);

    s = (a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p);
    k = (a.coordinate.z-b.coordinate.z)*b.exponent*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5.0*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(-b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) + 2.0*(p*p)))/(p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j+2, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 2.0*a.exponent*p + 7.0*b.exponent*p - 7.0*(p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+2, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+2, j+3, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p) - 3.5*b.exponent*(p*p) + 3.5*(p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+2, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+2, j+4, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p) - 3.5*b.exponent*(p*p) + 3.5*(p*p*p))/(p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+2, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+2, j+5, num_basis, is_symmetric);
}


// (d|d) kernel
__global__ 
void overlap_kinetic_MDdd(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1 /* s0 == s1 */, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, true); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 0, 0, 2, 0, 0) * 0.3333333333333333 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 0, 0, 1, 1, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm3 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 0, 2, 0, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm4 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 0, 1, 1, 0) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p);
    k = (-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 16.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 14.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 2.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 3.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 5.25*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
    k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
    k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.5*a.exponent*b.exponent*(p*p) + 3.5*a.exponent*(p*p*p) + 7.0*(b.exponent*b.exponent)*(p*p) - 7.0*b.exponent*(p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.5*a.exponent*b.exponent*(p*p) + 3.5*a.exponent*(p*p*p) + 7.0*(b.exponent*b.exponent)*(p*p) - 7.0*b.exponent*(p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 6*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p);
    k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j, num_basis, is_symmetric);

    s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p);
    k = (-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 16.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 14.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 2.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 3.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 5.25*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j+1, num_basis, is_symmetric);

    s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
    k = (-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+1, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+1, j+2, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.5*a.exponent*b.exponent*(p*p) + 3.5*a.exponent*(p*p*p) + 7.0*(b.exponent*b.exponent)*(p*p) - 7.0*b.exponent*(p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+1, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+1, j+3, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 6*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+1, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+1, j+4, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.5*a.exponent*b.exponent*(p*p) + 3.5*a.exponent*(p*p*p) + 7.0*(b.exponent*b.exponent)*(p*p) - 7.0*b.exponent*(p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+1, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+1, j+5, num_basis, is_symmetric);

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p);
    k = (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j, num_basis, is_symmetric);

    s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p);
    k = (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j+1, num_basis, is_symmetric);

    s = (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p);
    k = (-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 16.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 14.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 2.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 3.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 5.25*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm1* s, g_overlap, i+2, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm1* k, g_kinetic, i+2, j+2, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 6*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+2, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+2, j+3, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p) - 6.5*a.exponent*b.exponent*(p*p) + 3.5*a.exponent*(p*p*p) + 7.0*(b.exponent*b.exponent)*(p*p) - 7.0*b.exponent*(p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+2, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+2, j+4, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p) - 6.5*a.exponent*b.exponent*(p*p) + 3.5*a.exponent*(p*p*p) + 7.0*(b.exponent*b.exponent)*(p*p) - 7.0*b.exponent*(p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm2* s, g_overlap, i+2, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm2* k, g_kinetic, i+2, j+5, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*(a.exponent*a.exponent)*(p*p) + 9.0*a.exponent*b.exponent*(p*p) - 7.0*a.exponent*(p*p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+3, j, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+3, j, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*(a.exponent*a.exponent)*(p*p) + 9.0*a.exponent*b.exponent*(p*p) - 7.0*a.exponent*(p*p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+3, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+3, j+1, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*(-(b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(4.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + 2*(p*p)) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+3, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+3, j+2, num_basis, is_symmetric);

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = b.exponent*(-(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+3, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+3, j+3, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+3, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+3, j+4, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+3, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+3, j+5, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*(a.exponent*a.exponent)*(p*p) + 9.0*a.exponent*b.exponent*(p*p) - 7.0*a.exponent*(p*p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+4, j, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+4, j, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-(b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(4.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + 2*(p*p)) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+4, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+4, j+1, num_basis, is_symmetric);

    s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*(a.exponent*a.exponent)*(p*p) + 9.0*a.exponent*b.exponent*(p*p) - 7.0*a.exponent*(p*p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+4, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+4, j+2, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + 4*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+4, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+4, j+3, num_basis, is_symmetric);

    s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = b.exponent*(-(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+4, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+4, j+4, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*b.exponent)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+4, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+4, j+5, num_basis, is_symmetric);

    s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(4.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + 2*(p*p)) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+5, j, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+5, j, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*(a.exponent*a.exponent)*(p*p) + 9.0*a.exponent*b.exponent*(p*p) - 7.0*a.exponent*(p*p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+5, j+1, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+5, j+1, num_basis, is_symmetric);

    s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
    k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*(a.exponent*a.exponent)*(p*p) + 9.0*a.exponent*b.exponent*(p*p) - 7.0*a.exponent*(p*p*p) - 2.5*(b.exponent*b.exponent)*(p*p) + 3.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm3* s, g_overlap, i+5, j+2, num_basis, is_symmetric);
    AddToResult(coefandNorm3* k, g_kinetic, i+5, j+2, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + 4*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+5, j+3, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+5, j+3, num_basis, is_symmetric);

    s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*b.exponent)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + 4*(p*p)))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+5, j+4, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+5, j+4, num_basis, is_symmetric);

    s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
    k = b.exponent*(-(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p);
    AddToResult(coefandNorm4* s, g_overlap, i+5, j+5, num_basis, is_symmetric);
    AddToResult(coefandNorm4* k, g_kinetic, i+5, j+5, num_basis, is_symmetric);
}


// (s|f) kernel
__global__ 
void overlap_kinetic_MDsf(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, false, shell_s1.count); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 3, 0, 0) * 0.25819888974716115 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 2, 1, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm3 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 0, 0, 0, 1, 1, 1) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 10.5*(b.exponent*b.exponent)*(p*p) + 13.5*b.exponent*(p*p*p) - 3.0*(p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 10.5*(b.exponent*b.exponent)*(p*p) + 13.5*b.exponent*(p*p*p) - 3.0*(p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 10.5*(b.exponent*b.exponent)*(p*p) + 13.5*b.exponent*(p*p*p) - 3.0*(p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.5*(b.exponent*b.exponent)*(p*p) + 4.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.5*(b.exponent*b.exponent)*(p*p) + 4.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.5*(b.exponent*b.exponent)*(p*p) + 4.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.5*(b.exponent*b.exponent)*(p*p) + 4.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.5*(b.exponent*b.exponent)*(p*p) + 4.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+7, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.5*(b.exponent*b.exponent)*(p*p) + 4.5*b.exponent*(p*p*p) - (p*p*p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent*a.exponent)/(p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent*a.exponent)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent - 9.0*b.exponent*p + 9.0*(p*p))/(p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i, j+9, num_basis, is_symmetric);
}


// (p|f) kernel
__global__ 
void overlap_kinetic_MDpf(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, false, shell_s1.count); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 0, 0, 3, 0, 0) * 0.25819888974716115 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 0, 0, 2, 1, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm3 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 0, 0, 1, 1, 1) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

	s = (-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 0.75*(p*p))/(p*p*p*p);
	k = (2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 5.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 18.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 1.5*(p*p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*a.exponent*b.exponent*(p*p) + 10.5*(b.exponent*b.exponent)*(p*p) - 13.5*b.exponent*(p*p*p) + 3.0*(p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.0*a.exponent*b.exponent*(p*p) + 10.5*(b.exponent*b.exponent)*(p*p) - 13.5*b.exponent*(p*p*p) + 3.0*(p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

	s = -(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 10.0*a.exponent*b.exponent*(p*p) + 9.0*a.exponent*(p*p*p) + 3.5*(b.exponent*b.exponent)*(p*p) - 4.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 10.0*a.exponent*b.exponent*(p*p) + 9.0*a.exponent*(p*p*p) + 3.5*(b.exponent*b.exponent)*(p*p) - 4.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);

	s = -(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+6, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 4*(p*p)) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+7, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 4*(p*p)) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+8, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 6*(p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i, j+9, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*a.exponent*b.exponent*(p*p) + 10.5*(b.exponent*b.exponent)*(p*p) - 13.5*b.exponent*(p*p*p) + 3.0*(p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j, num_basis, is_symmetric);

	s = (-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 0.75*(p*p))/(p*p*p*p);
	k = (2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 5.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 18.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 1.5*(p*p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j+1, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.0*a.exponent*b.exponent*(p*p) + 10.5*(b.exponent*b.exponent)*(p*p) - 13.5*b.exponent*(p*p*p) + 3.0*(p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 10.0*a.exponent*b.exponent*(p*p) + 9.0*a.exponent*(p*p*p) + 3.5*(b.exponent*b.exponent)*(p*p) - 4.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+3, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+4, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 4*(p*p)) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+5, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) - 4*(p*p)) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+6, num_basis, is_symmetric);

	s = -(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+7, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 10.0*a.exponent*b.exponent*(p*p) + 9.0*a.exponent*(p*p*p) + 3.5*(b.exponent*b.exponent)*(p*p) - 4.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+8, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 6*(p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i+1, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i+1, j+9, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*a.exponent*b.exponent*(p*p) + 10.5*(b.exponent*b.exponent)*(p*p) - 13.5*b.exponent*(p*p*p) + 3.0*(p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*a.exponent*b.exponent*(p*p) + 10.5*(b.exponent*b.exponent)*(p*p) - 13.5*b.exponent*(p*p*p) + 3.0*(p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j+1, num_basis, is_symmetric);

	s = (-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 0.75*(p*p))/(p*p*p*p);
	k = (2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 5.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 1.5*(p*p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j+2, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) - 4*(p*p)) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+3, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) - 4*(p*p)) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+4, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 10.0*a.exponent*b.exponent*(p*p) + 9.0*a.exponent*(p*p*p) + 3.5*(b.exponent*b.exponent)*(p*p) - 4.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 4.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 10.0*a.exponent*b.exponent*(p*p) + 9.0*a.exponent*(p*p*p) + 3.5*(b.exponent*b.exponent)*(p*p) - 4.5*b.exponent*(p*p*p) + (p*p*p*p))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+7, num_basis, is_symmetric);

	s = -(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+8, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*b.exponent*(-b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 6*(p*p)))/(p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i+2, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i+2, j+9, num_basis, is_symmetric);
}


// (d|f) kernel
__global__ 
void overlap_kinetic_MDdf(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, false, shell_s1.count); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 0, 0, 3, 0, 0) * 0.14907119849998599 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 0, 0, 2, 1, 0) * 0.3333333333333333 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm3 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 0, 0, 1, 1, 1) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm4 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 0, 3, 0, 0) * 0.25819888974716115 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm5 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 0, 2, 1, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm6 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 0, 1, 1, 1) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

	s = (a.coordinate.x-b.coordinate.x)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p + 2.25*a.exponent*(p*p) - 1.5*b.exponent*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 16.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) + 36.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 27.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 23.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 20.25*a.exponent*b.exponent*(p*p*p*p) - 1.5*a.exponent*(p*p*p*p*p) + 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 13.5*(b.exponent*b.exponent)*(p*p*p*p) + 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))) - (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 11.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 20.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 6.75*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 11.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 20.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 6.75*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3.0*(p*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))) - (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+7, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) + (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 6*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i, j+9, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p + 2.25*a.exponent*(p*p) - 1.5*b.exponent*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 16.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) + 36.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 27.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 23.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 20.25*a.exponent*b.exponent*(p*p*p*p) - 1.5*a.exponent*(p*p*p*p*p) + 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 13.5*(b.exponent*b.exponent)*(p*p*p*p) + 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j+1, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 11.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 20.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 6.75*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+3, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))) - (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+4, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3.0*(p*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))) - (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+7, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 11.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 20.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 6.75*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) + (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 6*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i+1, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i+1, j+9, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 7.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 7.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j+1, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*p - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p + 2.25*a.exponent*(p*p) - 1.5*b.exponent*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 16.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) + 36.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 27.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) - 23.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 20.25*a.exponent*b.exponent*(p*p*p*p) - 1.5*a.exponent*(p*p*p*p*p) + 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 13.5*(b.exponent*b.exponent)*(p*p*p*p) + 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+3, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+4, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 11.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 20.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) - 6.75*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent) + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 8.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 11.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 20.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 18.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) - 6.75*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+7, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(-b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) + (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 6*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i+2, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i+2, j+9, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p - 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 21.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p) + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*a.exponent*b.exponent*(p*p*p) + 5.25*(b.exponent*b.exponent)*(p*p*p) - 6.75*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+3, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+3, j, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p - 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 21.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p) + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*a.exponent*b.exponent*(p*p*p) + 5.25*(b.exponent*b.exponent)*(p*p*p) - 6.75*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+3, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+3, j+1, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 4.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) + 6.0*a.exponent*b.exponent*(p*p) - 10.5*(b.exponent*b.exponent)*(p*p) + 13.5*b.exponent*(p*p*p) - 3.0*(p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+3, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+3, j+2, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*b.exponent*((a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) - (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+3, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*b.exponent*((a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) - (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+4, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - (p*p*p*p) - 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 4*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+5, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+6, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+7, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - (p*p*p*p) - 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 4*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+8, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+3, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+3, j+9, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p - 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 7.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 21.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p) + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*a.exponent*b.exponent*(p*p*p) + 5.25*(b.exponent*b.exponent)*(p*p*p) - 6.75*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+4, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+4, j, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 4.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*a.exponent*b.exponent*(p*p) - 10.5*(b.exponent*b.exponent)*(p*p) + 13.5*b.exponent*(p*p*p) - 3.0*(p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+4, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+4, j+1, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p - 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 21.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p) - 1.5*a.exponent*b.exponent*(p*p*p) + 5.25*(b.exponent*b.exponent)*(p*p*p) - 6.75*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+4, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+4, j+2, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+3, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - (p*p*p*p) - 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) - 4*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+4, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5.0*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+5, num_basis, is_symmetric);

	s = -(a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*b.exponent*((a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) - (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) - (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+6, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - (p*p*p*p) - 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 4*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+7, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+8, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*((-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+4, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+4, j+9, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) + 4.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 6.0*a.exponent*b.exponent*(p*p) - 10.5*(b.exponent*b.exponent)*(p*p) + 13.5*b.exponent*(p*p*p) - 3.0*(p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+5, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+5, j, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p - 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 7.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 21.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p) + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*a.exponent*b.exponent*(p*p*p) + 5.25*(b.exponent*b.exponent)*(p*p*p) - 6.75*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+5, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+5, j+1, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p - 0.75*(p*p))/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*b.exponent*(-2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 7.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 21.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p) - 1.5*a.exponent*b.exponent*(p*p*p) + 5.25*(b.exponent*b.exponent)*(p*p*p) - 6.75*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+5, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+5, j+2, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - (p*p*p*p) - 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) - 4*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+3, num_basis, is_symmetric);

	s = (a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+4, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+5, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(b.exponent*b.exponent)*(-b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - (p*p*p*p) - 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*a.exponent*p + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) - 4*(p*p)))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+6, num_basis, is_symmetric);

	s = -(a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.z-b.coordinate.z)*b.exponent*((a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) - (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) - (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+7, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*b.exponent*((a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) - (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5.0*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*a.exponent*b.exponent*((-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+5, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+5, j+9, num_basis, is_symmetric);

}


// (f|f) kernel
__global__ 
void overlap_kinetic_MDff(double* g_overlap, double* g_kinetic, 
                        PrimitiveShell *g_shell, real_t* g_cgto_normalization_factors, ShellTypeInfo shell_s0, ShellTypeInfo shell_s1 /* s0 == s1 */, 
                        size_t num_threads,
                        int num_basis)
{
    const size_t id = threadIdx.x + blockIdx.x*blockDim.x;
    if(id >= num_threads) return;

    size_t2 ab = index1to2(id, true); // Convert 1D index to 2D index a,b of [a|b]

    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];


    size_t i = a.basis_index; // Obtain basis index (i|j)
    size_t j = b.basis_index;

    const bool is_symmetric = primitive_index_a == primitive_index_b;

    double p = a.exponent + b.exponent;

    const double coefandNorm1 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 3, 0, 0, 3, 0, 0) * 0.06666666666666667 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm2 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 3, 0, 0, 2, 1, 0) * 0.14907119849998599 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm3 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 3, 0, 0, 1, 1, 1) * 0.25819888974716115 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm4 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 1, 0, 3, 0, 0) * 0.14907119849998599 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm5 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 1, 0, 2, 1, 0) * 0.3333333333333333 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm6 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 2, 1, 0, 1, 1, 1) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm7 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 1, 3, 0, 0) * 0.25819888974716115 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm8 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 1, 2, 1, 0) * 0.5773502691896257 * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));
    const double coefandNorm9 = a.coefficient * b.coefficient * calc_Norms(a.exponent, b.exponent, 1, 1, 1, 1, 1, 1) * pow((M_PI/p), 1.5) * exp(-(a.exponent*b.exponent/p)*calc_dist_GPU2(a.coordinate, b.coordinate));

    double k=0;
    double s=0;

    s = (-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 2.25*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 6.75*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p) + 2.25*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p) + 1.875*(p*p*p))/(p*p*p*p*p*p);
	k = (2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 15.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 7.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 48.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 54.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 40.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 42.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 20.25*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p*p) + 69.75*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 60.75*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p*p) - 15.75*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p*p) + 20.25*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p*p) - 3.75*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 3.75*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 16.875*(b.exponent*b.exponent)*(p*p*p*p) + 16.875*b.exponent*(p*p*p*p*p) - 2.25*(p*p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+1, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i, j+2, num_basis, is_symmetric);

	s = -(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p))/(p*p*p*p*p*p);
	k = (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(1.5*a.exponent*p + 0.5*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p))) + ((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p))*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+3, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*p + 1.5*a.exponent*(p*p) - 2.25*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 33.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 30.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p*p) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 21.0*a.exponent*b.exponent*(p*p*p) + 13.5*a.exponent*(p*p*p*p) + 20.25*(b.exponent*b.exponent)*(p*p*p) - 20.25*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+4, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*p + 1.5*a.exponent*(p*p) - 2.25*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 10.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 33.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 30.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p*p) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 21.0*a.exponent*b.exponent*(p*p*p) + 13.5*a.exponent*(p*p*p*p) + 20.25*(b.exponent*b.exponent)*(p*p*p) - 20.25*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+5, num_basis, is_symmetric);

	s = -(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p))/(p*p*p*p*p*p);
	k = (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(1.5*a.exponent*p + 0.5*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3.0*(p*p)*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p))) + ((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p))*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.25*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+6, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.75*p) + 2.0*b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+7, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent + 0.75*p) + 2.0*b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i, j+8, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 22.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 8.25*b.exponent*(p*p*p) + 6.75*(p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i, j+9, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j, num_basis, is_symmetric);

	s = (-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 2.25*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 6.75*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p) + 2.25*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p) + 1.875*(p*p*p))/(p*p*p*p*p*p);
	k = (2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 3.75*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 15.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 7.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 48.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 54.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 40.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 42.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 20.25*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p*p) + 69.75*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 60.75*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p*p) - 15.75*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p*p) + 20.25*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p*p) - 3.75*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 16.875*(b.exponent*b.exponent)*(p*p*p*p) + 16.875*b.exponent*(p*p*p*p*p) - 2.25*(p*p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j+1, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+1, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+1, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*p + 1.5*a.exponent*(p*p) - 2.25*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 33.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 30.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p*p) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 21.0*a.exponent*b.exponent*(p*p*p) + 13.5*a.exponent*(p*p*p*p) + 20.25*(b.exponent*b.exponent)*(p*p*p) - 20.25*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+3, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p))/(p*p*p*p*p*p);
	k = (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(1.5*a.exponent*p + 0.5*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p))) + ((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p))*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+4, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.75*p) + 2.0*b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+5, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.75*p) + 2.0*b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+6, num_basis, is_symmetric);

	s = -(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p))/(p*p*p*p*p*p);
	k = (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(1.5*a.exponent*p + 0.5*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3.0*(p*p)*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent + 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p))) + ((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p))*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.25*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+7, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*p + 1.5*a.exponent*(p*p) - 2.25*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 10.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 33.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 30.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p*p) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 21.0*a.exponent*b.exponent*(p*p*p) + 13.5*a.exponent*(p*p*p*p) + 20.25*(b.exponent*b.exponent)*(p*p*p) - 20.25*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+1, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+1, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*a.exponent)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) + 22.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) - 8.25*b.exponent*(p*p*p) + 6.75*(p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i+1, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i+1, j+9, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 7.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 7.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j+1, num_basis, is_symmetric);

	s = (-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*p + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*p + 2.25*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 6.75*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p) + 2.25*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p) + 1.875*(p*p*p))/(p*p*p*p*p*p);
	k = (2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 3.75*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 3.75*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 15.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 7.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 48.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) - 54.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) + 40.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p*p) - 42.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 20.25*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p*p) + 69.75*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) - 60.75*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p*p) - 15.75*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p*p) + 20.25*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p*p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p*p) - 16.875*(b.exponent*b.exponent)*(p*p*p*p) + 16.875*b.exponent*(p*p*p*p*p) - 2.25*(p*p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm1* s, g_overlap, i+2, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm1* k, g_kinetic, i+2, j+2, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.75*p) + 2.0*b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+3, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(2.0*b.exponent*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.75*p) + 2.0*b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (p*p)*(-2.0*a.exponent + b.exponent) - (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p) + p*(-a.exponent*p + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 1.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+4, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p))/(p*p*p*p*p*p);
	k = (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(1.5*a.exponent*p + 0.5*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p))) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p)) + ((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p))*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*p + 1.5*a.exponent*(p*p) - 2.25*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 33.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 30.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p*p) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) - 21.0*a.exponent*b.exponent*(p*p*p) + 13.5*a.exponent*(p*p*p*p) + 20.25*(b.exponent*b.exponent)*(p*p*p) - 20.25*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*p + 1.5*a.exponent*(p*p) - 2.25*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 10.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 33.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) - 30.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p*p) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) - 21.0*a.exponent*b.exponent*(p*p*p) + 13.5*a.exponent*(p*p*p*p) + 20.25*(b.exponent*b.exponent)*(p*p*p) - 20.25*b.exponent*(p*p*p*p) + 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+7, num_basis, is_symmetric);

	s = -(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p))/(p*p*p*p*p*p);
	k = (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(1.5*a.exponent*p + 0.5*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent + 0.5*p) + 0.5*p*(-a.exponent + b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p))) + ((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p))*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*p*(a.exponent - b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.25*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm2* s, g_overlap, i+2, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm2* k, g_kinetic, i+2, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*p + 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*a.exponent)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p) + 22.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p) - 8.25*b.exponent*(p*p*p) + 6.75*(p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm3* s, g_overlap, i+2, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm3* k, g_kinetic, i+2, j+9, num_basis, is_symmetric);

	s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p) + (b.exponent*b.exponent)*(-3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 3.0*p) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + 0.5*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 7*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) - 1.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+3, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+3, j, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 2.25*a.exponent*(p*p) + 1.5*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 22.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) - 39.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 26.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 20.25*a.exponent*b.exponent*(p*p*p*p) + 1.5*a.exponent*(p*p*p*p*p) - 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 13.5*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+3, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+3, j+1, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+3, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+3, j+2, num_basis, is_symmetric);

	s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+3, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+4, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+5, num_basis, is_symmetric);

	s = -(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+6, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+7, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*p - 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4*(p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+3, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+3, j+8, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + (b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+3, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+3, j+9, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 2.25*a.exponent*(p*p) + 1.5*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 22.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) - 39.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 26.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 20.25*a.exponent*b.exponent*(p*p*p*p) + 1.5*a.exponent*(p*p*p*p*p) - 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 13.5*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+4, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+4, j, num_basis, is_symmetric);

	s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p) + (b.exponent*b.exponent)*(-3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 3.0*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + 0.5*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 7*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) - 1.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+4, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+4, j+1, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+4, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+4, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+3, num_basis, is_symmetric);

	s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+4, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*p - 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 4*(p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+6, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+7, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))) + (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+4, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+4, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-(-2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + (b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+4, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+4, j+9, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*p - 2.25*a.exponent*(p*p) + 1.5*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 22.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) - 39.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 26.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 20.25*a.exponent*b.exponent*(p*p*p*p) + 1.5*a.exponent*(p*p*p*p*p) - 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 13.5*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+5, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+5, j, num_basis, is_symmetric);

	s = -(a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+5, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+5, j+1, num_basis, is_symmetric);

	s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p) + (b.exponent*b.exponent)*(-3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 3.0*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + 0.5*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) - 1.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+5, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+5, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+3, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p - 0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*p - 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + 4*(p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+4, num_basis, is_symmetric);

	s = (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 5.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 3.0*(p*p)*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+7, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+5, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+5, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+5, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+5, j+9, num_basis, is_symmetric);

	s = (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p) + (b.exponent*b.exponent)*(-3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 3.0*p) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + 0.5*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + 7.0*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p)) - 1.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+6, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+6, j, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+6, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+6, j+1, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*p + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p - 2.25*a.exponent*(p*p) + 1.5*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 22.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) - 39.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) - 4.5*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 26.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 20.25*a.exponent*b.exponent*(p*p*p*p) + 1.5*a.exponent*(p*p*p*p*p) - 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 13.5*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+6, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+6, j+2, num_basis, is_symmetric);

	s = -(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+6, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+6, j+3, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*((((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+6, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+6, j+4, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5.0*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+6, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+6, j+5, num_basis, is_symmetric);

	s = (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+6, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+6, j+6, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*p - 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 4*(p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+6, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+6, j+7, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+6, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+6, j+8, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-(-2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + (b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+6, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+6, j+9, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+7, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+7, j, num_basis, is_symmetric);

	s = (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p) + (b.exponent*b.exponent)*(-3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 3.0*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 2.0*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p) + 0.5*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p)) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 7.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) - 1.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+7, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+7, j+1, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*p + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*p - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*p - 2.25*a.exponent*(p*p) + 1.5*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 22.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) - 39.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) - 4.5*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 26.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 20.25*a.exponent*b.exponent*(p*p*p*p) + 1.5*a.exponent*(p*p*p*p*p) - 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 13.5*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+7, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+7, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*((((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))) + (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+7, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+7, j+3, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+7, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+7, j+4, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+7, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+7, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p - 0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*p - 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + 4*(p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+7, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+7, j+6, num_basis, is_symmetric);

	s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3.0*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+7, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+7, j+7, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5.0*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+7, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+7, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(-b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + (b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+7, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+7, j+9, num_basis, is_symmetric);

	s = -(a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 4.0*(p*p) + 2.0*p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 2.0*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p)) - 7*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3.0*(p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+8, j, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+8, j, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*p - 2.25*a.exponent*(p*p) + 1.5*b.exponent*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p + 4.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p - 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent*b.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) + 22.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 4.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p*p) - 39.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) + 27.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p*p) + 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p*p) + 4.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*(p*p) - 4.5*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 26.25*a.exponent*(b.exponent*b.exponent)*(p*p*p) - 20.25*a.exponent*b.exponent*(p*p*p*p) + 1.5*a.exponent*(p*p*p*p*p) - 10.5*(b.exponent*b.exponent*b.exponent)*(p*p*p) + 13.5*(b.exponent*b.exponent)*(p*p*p*p) - 3.0*b.exponent*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+8, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+8, j+1, num_basis, is_symmetric);

	s = (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p) + (b.exponent*b.exponent)*(-3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 3.0*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 2.0*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p) + 0.5*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p)) - 1.5*(p*p*p) - (p*p)*(3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + 7*b.exponent*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p)) - 1.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm4* s, g_overlap, i+8, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm4* k, g_kinetic, i+8, j+2, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent) - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p - 0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*p - 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 5*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + 4*(p*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+8, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+8, j+3, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 3*(p*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+8, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+8, j+4, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (-b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*((b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) - 5*b.exponent*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+8, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+8, j+5, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*a.exponent*b.exponent*((((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - (p*p) - p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + (p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent) + 0.5*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+8, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+8, j+6, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(-(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)) - (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 3.0*(p*p)*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))) + (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+8, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+8, j+7, num_basis, is_symmetric);

	s = (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))/(p*p*p*p*p*p);
	k = (-b.exponent*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + p) - (p*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + b.exponent*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(b.exponent*b.exponent)*(p*p*p*p) + (b.exponent*b.exponent)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(p*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 3.0*p) - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(1.5*a.exponent*(p*p) + 0.5*a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 1.5*(p*p*p) + (p*p)*(3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + 5.0*b.exponent*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) - 0.5*(p*p) - p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p)) + 0.5*(p*p*p*p*p)))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm5* s, g_overlap, i+8, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm5* k, g_kinetic, i+8, j+8, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*(-b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(-a.exponent + b.exponent))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*a.exponent*b.exponent*(-(-2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 3*(p*p))*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (b.exponent*(3.0*a.exponent*(p*p) + a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*b.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) - 3*(p*p)*(b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p) + 0.5*p*(a.exponent - b.exponent)))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm6* s, g_overlap, i+8, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm6* k, g_kinetic, i+8, j+9, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent + 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*p + 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 12.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 6.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) - 24.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 10.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(p*p*p*p) - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*a.exponent*b.exponent*(p*p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm7* s, g_overlap, i+9, j, num_basis, is_symmetric);
	AddToResult(coefandNorm7* k, g_kinetic, i+9, j, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(-((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent + 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*p + 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 12.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p + 6.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) - 24.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 10.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(p*p*p*p) - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 3.0*a.exponent*b.exponent*(p*p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm7* s, g_overlap, i+9, j+1, num_basis, is_symmetric);
	AddToResult(coefandNorm7* k, g_kinetic, i+9, j+1, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*(-((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent + 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*p + 0.75*(p*p))/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 3.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent) - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*p + 12.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent*b.exponent)*p - 9.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 6.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent*a.exponent)*b.exponent*(p*p) - 24.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(b.exponent*b.exponent)*(p*p) + 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*b.exponent*(p*p*p) + 10.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent*b.exponent)*(p*p) - 13.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*(b.exponent*b.exponent)*(p*p*p) + 3.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(p*p*p*p) + 3.0*a.exponent*b.exponent*(p*p*p) - 5.25*(b.exponent*b.exponent)*(p*p*p) + 6.75*b.exponent*(p*p*p*p) - 1.5*(p*p*p*p*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm7* s, g_overlap, i+9, j+2, num_basis, is_symmetric);
	AddToResult(coefandNorm7* k, g_kinetic, i+9, j+2, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*((a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm8* s, g_overlap, i+9, j+3, num_basis, is_symmetric);
	AddToResult(coefandNorm8* k, g_kinetic, i+9, j+3, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*((a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm8* s, g_overlap, i+9, j+4, num_basis, is_symmetric);
	AddToResult(coefandNorm8* k, g_kinetic, i+9, j+4, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*((a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p + ((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm8* s, g_overlap, i+9, j+5, num_basis, is_symmetric);
	AddToResult(coefandNorm8* k, g_kinetic, i+9, j+5, num_basis, is_symmetric);

	s = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.y-b.coordinate.y)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*((a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm8* s, g_overlap, i+9, j+6, num_basis, is_symmetric);
	AddToResult(coefandNorm8* k, g_kinetic, i+9, j+6, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.z-b.coordinate.z)*(b.exponent*b.exponent)*((a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p + ((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm8* s, g_overlap, i+9, j+7, num_basis, is_symmetric);
	AddToResult(coefandNorm8* k, g_kinetic, i+9, j+7, num_basis, is_symmetric);

	s = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*b.exponent*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = (a.coordinate.x-b.coordinate.x)*(a.coordinate.y-b.coordinate.y)*(b.exponent*b.exponent)*((a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)) + (a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(2.0*a.exponent*p - 2.0*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p) + (p*p)) + (((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)*(b.exponent*(-3.0*a.exponent*(p*p) - a.exponent*p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) - 2.0*a.exponent*p*(1.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.75*p) + 2.0*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p + ((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + 0.5*(p*p) + p*(0.5*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.25*p))) + (p*p*p*p) + 5*(p*p)*(a.exponent*p - b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p))))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm8* s, g_overlap, i+9, j+8, num_basis, is_symmetric);
	AddToResult(coefandNorm8* k, g_kinetic, i+9, j+8, num_basis, is_symmetric);

	s = -(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p)/(p*p*p*p*p*p);
	k = b.exponent*(-(b.exponent*(2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p) - (b.exponent*(2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent)*p - 2.0*((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 1.5*p) + (p*p) + p*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*(a.exponent*a.exponent) + 0.5*p)) + 3*(p*p)*(((a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))*a.exponent*b.exponent - 0.5*p))*(((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x))*a.exponent*b.exponent - 0.5*p)*(((a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y))*a.exponent*b.exponent - 0.5*p))/(p*p*p*p*p*p*p*p);
	AddToResult(coefandNorm9* s, g_overlap, i+9, j+9, num_basis, is_symmetric);
	AddToResult(coefandNorm9* k, g_kinetic, i+9, j+9, num_basis, is_symmetric);

}

